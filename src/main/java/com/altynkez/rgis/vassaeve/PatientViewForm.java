package com.altynkez.rgis.vassaeve;

import com.altynkez.rgis.vassaeve.entity.Patient;
import com.altynkez.rgis.vassaeve.utils.EntityDescriptions;
import com.toedter.calendar.JDateChooser;
import java.awt.Component;
import java.awt.Container;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.text.JTextComponent;
import org.apache.commons.lang.reflect.FieldUtils;

/**
 * Created by e.vassaev.
 */
public class PatientViewForm extends javax.swing.JDialog {

    private static final long serialVersionUID = -5569027851200514863L;

    public static final int RET_OK = 1000;
    public static final int RET_CANCEL = 1001;

    private int returnStatus = RET_CANCEL;
    private Patient patient;

    /**
     * Creates new form PatientViewForm
     *
     * @param parent
     * @param modal
     */
    public PatientViewForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        //!!!
        controlsPanel.setLayout(new java.awt.GridLayout(EntityDescriptions.PATIENT.getFieldsDescriptions().size() + 1, 4, 10, 10));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        controlsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cancelButton.setText("Закрыть");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(265, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cancelButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        controlsPanel.setLayout(new java.awt.GridLayout(20, 2, 10, 10));
        jPanel2.add(controlsPanel, java.awt.BorderLayout.CENTER);

        jLabel1.setText("     ");
        jPanel2.add(jLabel1, java.awt.BorderLayout.WEST);

        jLabel2.setText("     ");
        jPanel2.add(jLabel2, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

   

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose(); //?
    }

    public int getReturnStatus() {
        return returnStatus;
    }

    public void setObj(Patient obj) {

        this.patient = obj;
        showControls();
        proccess();

    }

    private void showControls() {
        controlsPanel.removeAll();
        controlsPanel.revalidate();
        Map<String, EntityDescriptions.FieldDescription> fieldsDescriptions = EntityDescriptions.PATIENT.getFieldsDescriptions();

        for (String fieldName : fieldsDescriptions.keySet()) {
            EntityDescriptions.FieldDescription fieldDescription = fieldsDescriptions.get(fieldName);
            JLabel label = new JLabel(fieldDescription.getDescription());
            JComponent control;
            switch (fieldDescription.getType().getTypeName()) {
                case "java.sql.Date":
                    control = new com.toedter.calendar.JDateChooser();
                    break;
                case "java.lang.String":
                    control = new JTextField();
                    break;
                default:
                    control = new JTextField();
            }
            control.setName(fieldName);

            controlsPanel.add(label);
            controlsPanel.add(control);
        }

    }

    public void setNew(boolean b) {

        setTitle("PATIENT ( просмотр )");
    }

    private void proccess() {
        List<Component> comps = getAllComponents(this);
        comps.stream().forEach((comp) -> {
            String name = comp.getName();
            if (name != null && !name.isEmpty()) {
                proccessSimpleControl(comp);
            }
        });
    }

    protected java.util.List<Component> getAllComponents(Container c) {
        Component[] comps = c.getComponents();
        java.util.List<Component> compList;
        compList = new ArrayList<>(0);
        for (Component comp : comps) {
            compList.add(comp);
            if (comp instanceof Container) {
                compList.addAll(getAllComponents((Container) comp));
            }
        }
        return compList;
    }

    private void proccessSimpleControl(Component comp) {
        String name = comp.getName();
        Object val = getField(name);
        if (val == null) {
            return;
        }
        if (comp instanceof JDateChooser) {
            java.sql.Date value = (java.sql.Date) val;

            ((JDateChooser) comp).setDate(new java.util.Date(value.getTime()));

        } else if (comp instanceof JTextField) {
            ((JTextComponent) comp).setText(val + "");
        
        }
    }

    protected Object getField(String fieldName) {
        try {
            Object value = FieldUtils.readField(patient, fieldName, true);
            return value;
        } catch (IllegalAccessException | IllegalArgumentException ex) {
        }
        return null;
    }

    protected Patient getObj() {
        return patient;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

}
