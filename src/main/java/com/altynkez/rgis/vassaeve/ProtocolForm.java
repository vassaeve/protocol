package com.altynkez.rgis.vassaeve;

import com.toedter.calendar.JDateChooser;
import com.toedter.components.JSpinField;
import com.vassaeve.components.CheckBoxJList;
import com.vassaeve.components.JComboCheckBox;
import com.vassaeve.components.WholeNumberField;
import com.vassaeve.forms.BaseForm;
import java.awt.Component;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.AbstractButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JFormattedTextField;
import javax.swing.JList;
import javax.swing.JRadioButton;
import javax.swing.JSlider;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.JTextComponent;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Created by e.vassaev.
 */
public class ProtocolForm extends BaseForm {

    private static final long serialVersionUID = -4519162688215442462L;
    private static final Logger LOGGER = LoggerFactory.getLogger(ProtocolForm.class);

    private int selectedIndex;
    private JTabbedPane TabbedPane = null;
    private Map<String, String> mapka = new HashMap<>();

    /**
     * Creates new form PatientViewForm
     *
     * @param parent
     * @param modal
     */
    public ProtocolForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        MainPane.setSelectedIndex(2);
    }

    public Map<String, String> getMapka() {
        return mapka;
    }

    public void setMapka(Map<String, String> mapka) {
        this.mapka = mapka;
    }

    private void prevButtPressed() {
        if (getTabbedPane() != null) {

            selectedIndex = TabbedPane.getSelectedIndex();
            try {
                TabbedPane.setSelectedIndex(selectedIndex - 1);
                selectedIndex--;
            } catch (Exception ex) {
                selectedIndex = TabbedPane.getTabCount() - 1;
                TabbedPane.setSelectedIndex(selectedIndex);
            }
        }
    }

    private void nextButtPressed() {
        if (getTabbedPane() != null) {
            selectedIndex = TabbedPane.getSelectedIndex();
            try {
                TabbedPane.setSelectedIndex(selectedIndex + 1);
                selectedIndex++;
            } catch (Exception ex) {
                selectedIndex = 1;
                TabbedPane.setSelectedIndex(selectedIndex);
            }
        }
    }

    private JTabbedPane getTabbedPane() {
        if (TabbedPane == null) {
            int count = getContentPane().getComponentCount();
            for (int i = 0; i < count; i++) {
                Component comp = getContentPane().getComponent(i);
                if (comp.getClass().getName().contains(".JTabbedPane")) {
                    if (comp.getName().equals("MainPane")) {
                        TabbedPane = (JTabbedPane) comp;
                        return TabbedPane;
                    }
                }
            }
        } else {
            return TabbedPane;
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        MainPane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Поиск пациентов");

        cancelButton.setText("Закрыть");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("Сохранить");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jButton1.setText("<< Назад");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Вперед >>");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MainPane.setName("MainPane"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1042, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );

        MainPane.addTab("Жалобы", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1042, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );

        MainPane.addTab("Анамнез", jPanel3);

        jLabel1.setText("Масса тела, кг");

        jTextField1.setName("jTextField1"); // NOI18N

        jLabel2.setText("Температура");

        jTextField2.setName("jTextField2"); // NOI18N

        jLabel3.setText("ЧСС, уд. в мин");

        jTextField3.setName("jTextField3"); // NOI18N

        jLabel4.setText("АД, мм рт. ст.");

        jTextField4.setName("jTextField4"); // NOI18N

        jLabel5.setText("ЧДД в мин");

        jTextField5.setName("jTextField5"); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                    .addComponent(jTextField1))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(jTextField3))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(495, 495, 495))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(488, Short.MAX_VALUE))
        );

        MainPane.addTab("Общий осмотр", jPanel4);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1042, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );

        MainPane.addTab("Органы дыхания", jPanel5);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1042, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );

        MainPane.addTab("ССС", jPanel6);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1042, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );

        MainPane.addTab("Живот", jPanel7);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1042, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );

        MainPane.addTab("МПС", jPanel8);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1042, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );

        MainPane.addTab("Нервная система", jPanel9);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1042, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );

        MainPane.addTab("Исследования", jPanel10);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1042, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );

        MainPane.addTab("Дополнительно", jPanel11);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1042, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );

        MainPane.addTab("Протокол", jPanel12);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPane)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MainPane, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

        List<Component> comps = getAllComponents(getTabbedPane());
        savePanels(comps);

        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    void savePanels(List<Component> comps) {
        for (Component comp : comps) {
            String name = comp.getName();
            if (!StringUtils.isEmpty(name)) {

                if (comp instanceof JCheckBox) {
                    JCheckBox box = ((JCheckBox) comp);
                    if (box.isEnabled() & box.isSelected()) {
                        mapka.put(name, box.isSelected() + "");
                    }
                } else if (comp instanceof JTable) {
                    JTable table = ((JTable) comp);
                    String result = "";
                    int colCount = table.getColumnCount();
                    int rowCount = table.getRowCount();
                    for (int row = 0; row < rowCount; row++) {
                        result += "{";
                        for (int col = 0; col < colCount; col++) {
                            result = result + table.getValueAt(row, col) + (col < (colCount - 1) ? "|" : "");
                        }
                        result = result + "}" + (row < (rowCount - 1) ? "," : "");
                    }
                    mapka.put(name, result);
                } else if (comp instanceof JDateChooser) {
                    JDateChooser but = ((JDateChooser) comp);
                    String fs = ((JDateChooser) comp).getDateFormatString();
                    SimpleDateFormat ss = new SimpleDateFormat(fs);
                    mapka.put(name, ss.format(((JDateChooser) comp).getDate()) + "");
                } else if (comp instanceof JRadioButton) {
                    JRadioButton but = ((JRadioButton) comp);
                    if (but.isEnabled() & but.isSelected()) {
                        mapka.put(name, ((AbstractButton) comp).isSelected() + "");
                    }
                } else if (comp instanceof JSlider) {
                    JSlider but = ((JSlider) comp);
                    if (but.isEnabled()) {
                        mapka.put(name, ((JSlider) comp).getValue() + "");
                    }
                } else if (comp instanceof JSpinField) {
                    JSpinField but = ((JSpinField) comp);
                    if (but.isEnabled()) {
                        mapka.put(name, but.getValue() + "");
                    }

                } else if (comp instanceof CheckBoxJList) {
                    CheckBoxJList list = ((CheckBoxJList) comp);
                    if (list.isEnabled()) {
                        mapka.put(name, Arrays.toString(list.getSelected().toArray()));
                    }
                } else if (comp instanceof JList) {
                    JList list = ((JList) comp);
                    if (list.isEnabled()) {
                        mapka.put(name, Arrays.toString(list.getSelectedValues()));
                    }
                } else if (comp instanceof JComboCheckBox) {
                    JComboCheckBox box = (JComboCheckBox) comp;
                    if (box.isEnabled()) {
                        String result = "[";

                        for (int i = 0; i < box.getItemCount(); i++) {
                            JCheckBox jch = (JCheckBox) box.getItemAt(i);
                            if (jch.isSelected()) {
                                result += jch.getText() + ",";
                            }
                        }
                        result += "]";
                        mapka.put(name, result);
                    }
                } else if (comp instanceof JComboBox) {
                    JComboBox box = ((JComboBox) comp);
                    if (box.isEnabled()) {
                        if (box.getSelectedItem() != null) {
                            mapka.put(name, box.getSelectedItem().toString());
                        }
                    }
                } else if (comp instanceof JEditorPane) {
                    JEditorPane pane = ((JEditorPane) comp);
                    if (pane.isEnabled()) {
                        if (pane.getContentType().equals("text/rtf")) {
                            try {
                                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                                pane.getEditorKit().write(baos, pane.getDocument(), 0, pane.getDocument().getLength() - 1);
                                mapka.put(name, baos.toString());
                            } catch (IOException | BadLocationException ex) {
                                //super.logError(this.getClass().getName(), ex);
                            }
                        } else {
                            mapka.put(name, pane.getText());
                        }
                    }
                } else if (comp instanceof JTextArea) {
                    JTextArea pane = ((JTextArea) comp);
                    if (pane.isEnabled()) {
                        mapka.put(name, pane.getText());
                    }
                } else if (comp instanceof JTextField) {
                    JTextField text = ((JTextField) comp);
                    if (text.isEnabled()) {
                        mapka.put(name, text.getText());
                    }
                } else if (comp instanceof WholeNumberField) {
                    WholeNumberField text = ((WholeNumberField) comp);
                    if (text.isEnabled()) {
                        mapka.put(name, text.getValue() + "");
                    }
                } else if (comp instanceof JFormattedTextField) {
                    JFormattedTextField text = ((JFormattedTextField) comp);
                    if (text.isEnabled()) {
                        String val;
                        try {
                            val = text.getFormatter().valueToString(text.getValue());
                        } catch (Exception ee) {
                            val = text.getValue() + "";
                        }
                        mapka.put(name, val);
                    }
                }
            }
        }
    }

    void proccessPanels(Map<String, String> prop) {
        List<Component> comps = getAllComponents(this);
        ////Map<String, String> map = new HashMap<>();
        for (Component comp : comps) {
            String name = comp.getName();
            if (name != null) {
                String obj = prop.get(name);
                if (comp instanceof JCheckBox) {
                    boolean val = Boolean.parseBoolean(obj);
                    //System.out.println(name+" = "+val);
                    if (val) {
                        ((AbstractButton) comp).setSelected(val);
                    }
                } else if (comp instanceof JRadioButton) {
                    boolean val = Boolean.parseBoolean(obj);
                    if (val) {
                        ((AbstractButton) comp).setSelected(val);
                    }
                } else if (comp instanceof WholeNumberField) {
                    try {
                        int val = Integer.parseInt(obj);
                        ((WholeNumberField) comp).setValue(val);
                    } catch (NumberFormatException ex) {
                        ((WholeNumberField) comp).setValue(0);
                    }
                } else if (comp instanceof JSlider) {
                    try {
                        int val = Integer.parseInt(obj);
                        if (val != 0) {
                            ((JSlider) comp).setValue(val);
                        }
                    } catch (NumberFormatException ex) {
                    }
                } else if (comp instanceof CheckBoxJList) {
                    loadList((CheckBoxJList) comp, obj);
                } else if (comp instanceof JList) {
                    loadList((JList) comp, obj);
                } else if (comp instanceof JTable) {
                    loadTable((JTable) comp, obj);
                } else if (comp instanceof JDateChooser) {
                    try {
                        String fs = ((JDateChooser) comp).getDateFormatString();
                        SimpleDateFormat ss = new SimpleDateFormat(fs);
                        java.util.Date val;
                        if (obj != null) {
                            val = ss.parse(obj);
                        } else {
                            val = new Date();
                        }
                        ((JDateChooser) comp).setDate(val);
                    } catch (ParseException ex) {
                    }

                } else if (comp instanceof JEditorPane) {
                    JEditorPane pane = (JEditorPane) comp;
                    if (pane.getContentType().equals("text/rtf")) {
                        try {
                            if (obj != null) {
                                byte[] buf = obj.getBytes();
                                pane.setText("");
                                ByteArrayInputStream bais = new ByteArrayInputStream(buf);
                                pane.getEditorKit().read(bais, pane.getDocument(), 0);
                                //System.out.println(1);
                            }
                        } catch (IOException | BadLocationException ex) {
                            //super.logError(this.getClass().getName(), ex);
                        }
                    } else {
                        pane.setText(obj);
                    }
                } else if (comp instanceof JTextField) {
                    ((JTextComponent) comp).setText(obj);
                } else if (comp instanceof JTextArea) {
                    ((JTextComponent) comp).setText(obj);
                } else if (comp instanceof JComboBox) {
                    JComboBox box = (JComboBox) comp;
                    box.setSelectedItem(obj);
                }
            }
        }
    }

    private void loadTable(JTable table, String obj) {
        if (obj != null) {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            String[] rows = obj.split(",");
            int rowC = 0;
            for (String row : rows) {
                row = row.replaceAll("\\{", "").replaceAll("\\}", "");
                int colC = 0;
                String[] vals = row.split("\\|");
                for (String val : vals) {
                    Class cls = model.getColumnClass(colC);
                    model.setValueAt(val, rowC, colC);
                    colC++;
                }
                rowC++;
            }
            table.setModel(model);
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        prevButtPressed();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        nextButtPressed();
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane MainPane;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

}
